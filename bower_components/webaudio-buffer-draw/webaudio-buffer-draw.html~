<link rel="import" href="/bower_components/polymer/polymer.html">
<script src="js/drawbuffer.js"></script>
<script src="js/base64array.js"></script>

<polymer-element name="webaudio-buffer-draw" attributes="src width height">
  <template>
    <style>
      :host {
        display: block;
      }
      #sound-buffer-view {
         transition-property: all;
         transition-timing-function: linear;
         transition-duration: 0s;
         -webkit-clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%, 0% 0%);
         clip-path: polygon(0% 0%, 0% 0%, 0% 100%, 0% 100%, 0% 0%);
      }
      #sound-buffer-view.playing {
         -webkit-clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%, 0% 0%);
         clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%, 0% 0%);
      }
    </style>
    <canvas id="sound-buffer-view" width="{{ width }}" height="{{ height }}"></canvas>
  </template>
  <script>
    Polymer('webaudio-buffer-draw', {
      width: 200,
      height: 50,
      color: 'grey',
      ready: function() {
        AudioContext = AudioContext || webkitAudioContext;
        window.audioContext = window.audioContext || new AudioContext();
        this.audioSource = window.audioContext.createBufferSource();
        this.audioSource.connect(window.audioContext.destination);
        this.canvas = this.$['sound-buffer-view'];
      },
      srcChanged: function(oldVal, newVal) {
        this.loadAudioSrc();
      },
      loadAudioSrc: function() {
        var base64shebang = 'data:audio/mp3;base64,';
        if (this.src.indexOf(base64shebang) == 0) {
          var audioData = this.src.slice(base64shebang.length);
          this.play64(audioData);
        } else {
          var audioRequest = new XMLHttpRequest();
          audioRequest.open("GET", this.src, true);
          audioRequest.responseType = "arraybuffer";
          audioRequest.onload = function() {
            this.play(audioRequest.response);
          }.bind(this);
          audioRequest.send();
        }
      },
      play: function(audioData) {
        window.audioContext.decodeAudioData(audioData, function(buffer) {
          this.audioSource.buffer = buffer;
          this.audioSource.start(0);
          this.drawBuffer(buffer);
          this.canvas.style['transition-duration'] = buffer.duration + 's';
          this.canvas.className = 'playing';
        }.bind(this));
      },
      play64: function(base64AudioData) {
        this.play(base64DecToArr(base64AudioData).buffer);
      },
      stop: function() {
        this.audioSource.stop(0);
      },
      drawBuffer: function(buffer) {
        drawBuffer(this.canvas.width, this.canvas.height, this.canvas.getContext('2d'), buffer);
      }
    });
  </script>
</polymer-element>
